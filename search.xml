<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python的函数]]></title>
    <url>%2F2019%2F03%2F09%2FPython%E7%9A%84%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Python有三大重要之处：对象、函数、模块，本讲主要针对函数。 一、创建使用函数def 函数名称(): # def () :必不可少12345678910&gt;&gt;&gt; def MYFIRSTFUNCTION(): print(&apos;这是我创建的第一个函数！&apos;) print(&apos;im so excited&apos;) print(&apos;happyhappy!&apos;) #代码块 &gt;&gt;&gt; MYFIRSTFUNCTION()这是我创建的第一个函数！im so excitedhappyhappy! 二、函数的参数1.理解参数使函数个性化，记得可写上参数的注释。1234567&gt;&gt;&gt; def add(num1,num2): result = num1+num2 print(result) &gt;&gt;&gt; add(1,2)3 2.函数的返回值12345&gt;&gt;&gt; def add(num1,num2): return (num1+num2)&gt;&gt;&gt; print(add(666,888))1554 3.形参和实参 4.函数文档123456789&gt;&gt;&gt; def a(): &apos;aaaa&apos; print(&apos;lalal&apos;) &gt;&gt;&gt; a()lalal&gt;&gt;&gt; a.__doc__&apos;aaaa&apos; ‘里面是文档内容’ print()是输出的内容 5.关键字参数在内容前加上参数名称1234567891011&gt;&gt;&gt; def a(name,word): print(name+&apos;wmz&apos;+word)&gt;&gt;&gt; a(&apos;爱你&apos;,&apos;爱你&apos;)爱你wmz爱你&gt;&gt;&gt; a(&apos;小甲鱼&apos;,&apos;sb&apos;)小甲鱼wmzsb&gt;&gt;&gt; a(&apos;sb&apos;,&apos;小甲鱼&apos;)sbwmz小甲鱼&gt;&gt;&gt; a(word=&apos;sb&apos;,name=&apos;小甲鱼&apos;)小甲鱼wmzsb 虽然会多打一些字，但等参数很多的时候就不会乱了。 6.默认参数def中设置，若之后忘记输入参数，也可以实现。123456&gt;&gt;&gt; def a(word=&apos;sb&apos;,name=&apos;小甲鱼&apos;): print(name+&apos;aa&apos;+word) &gt;&gt;&gt; a()小甲鱼aasb 7.收集参数：1234567891011121314151617181920212223242526272829303132333435&gt;&gt;&gt; def test(* params): print(&apos;参数长度：&apos;,len(params)); print(&apos;第一个参数是；&apos;,params[0]); &gt;&gt;&gt; test(1,2,3,8,8,8,8,88,888)参数长度： 9第一个参数是； 1# 但如果有其他参数在：&gt;&gt;&gt; def test(* params,exp): print(&apos;参数长度：&apos;,len(params)); print(&apos;第一个参数是；&apos;,params[0]);&gt;&gt;&gt; test(1,2,3,8,8,8,8,88,888)Traceback (most recent call last): File &quot;&lt;pyshell#84&gt;&quot;, line 1, in &lt;module&gt; test(1,2,3,8,8,8,8,88,888)TypeError: test() missing 1 required keyword-only argument: &apos;exp&apos;# 此时就会出错，就要使用关键字参数来定义exp这个参数&gt;&gt;&gt; test(1,2,3,8,8,8,8,88,888,exp=8)参数长度： 9第一个参数是； 1# 或者使用默认参数直接给exp参数赋值：&gt;&gt;&gt; def test(* params,exp=8): print(&apos;参数长度：&apos;,len(params),exp); print(&apos;第一个参数是；&apos;,params[0]); &gt;&gt;&gt; test(1,2,3,8,8,8,8,88,888)参数长度： 9 8第一个参数是； 1 三、小练习1]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的序列]]></title>
    <url>%2F2019%2F03%2F09%2FPython%E7%9A%84%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[本讲讲述Python的序列，之前所讲的列表、元组、字符串统称为序列。 一、序列如开头所说，列表、元组、字符串都可以叫做序列，那么此处回忆一下列表、元组和字符串的共同特点： 都可以通过索引得到每一个元素 默认索引值总是从0开始 可以通过分片的方法得到一个范围内的元素的集合 有很多共同的操作符(重复操作符、拼接操作符、成员关系操作符) 二、迭代(iterable)迭代：重复反馈过程的活动，目的是为了接近或达到所需的目标/结果，每对过程进行一次重复叫一此迭代，每一次迭代的结果会被作为下一次的初始值。 1.list()把一个可迭代对象转换为列表:list(iterable)1234567891011&gt;&gt;&gt; a = &apos;abc&apos;&gt;&gt;&gt; a&apos;abc&apos;&gt;&gt;&gt; list(a)[&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]&gt;&gt;&gt; a = 1,2,3&gt;&gt;&gt; a(1, 2, 3)&gt;&gt;&gt; list(a)[1, 2, 3] 2.tuple()把一个可迭代对象转换为元组，和list操作一样。123&gt;&gt;&gt; a = &apos;abc&apos;&gt;&gt;&gt; tuple(a)(&apos;a&apos;, &apos;b&apos;, &apos;c&apos;) 3.str() len() max() min() str() 把obj转换为字符串 len() 返回参数的长度 max() 返回序列或者参数集合中的最大值 min() 返回序列或者参数集合中的最小值 注：比较时数据类型要统一，都是数字，都是字符串等 4.sum(iterable,[start=0])返回序列iterable和可选参数start的总和123456&gt;&gt;&gt; c[1, 1, 2, 2, 3, 3, 8, 8]&gt;&gt;&gt; sum(c)28&gt;&gt;&gt; sum(c,5)33 5.sorted() = list.sort() = list(sorted())排序：默认从小到大。当sorted()不能正常使用时，转化为后两种即可，一般为最后的。12&gt;&gt;&gt; list(sorted(c))[1, 1, 2, 2, 3, 3, 8, 8] 6.reversed() = list(reversed())排序：默认从大到小12&gt;&gt;&gt; list(reversed(c))[8, 8, 3, 3, 2, 2, 1, 1] 7.enumerate()枚举12&gt;&gt;&gt; list(enumerate(c))[(0, 1), (1, 1), (2, 2), (3, 2), (4, 3), (5, 3), (6, 8), (7, 8)] 8.zip()压缩12345&gt;&gt;&gt; a = [4,5,6,7,8]&gt;&gt;&gt; c[1, 1, 2, 2, 3, 3, 8, 8]&gt;&gt;&gt; list(zip(a,c))[(4, 1), (5, 1), (6, 2), (7, 2), (8, 3)] 三、小练习]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python元组+字符串]]></title>
    <url>%2F2019%2F03%2F07%2FPython%E5%85%83%E7%BB%84%2B%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[本讲讲介绍元组及字符串的特征及操作等。 一、元组(tuple)元组与列表非常相似，但是元组不可改变，列表可以修改。 1.创建+访问一个元组 在元组中，逗号是关键，小括号不是关键。 123456789101112131415161718192021222324252627&gt;&gt;&gt; tuple1 = (1,2,3,4,5,6,7,8)&gt;&gt;&gt; tuple1(1, 2, 3, 4, 5, 6, 7, 8)&gt;&gt;&gt; tuple1[0]1&gt;&gt;&gt; tuple1[:5](1, 2, 3, 4, 5)&gt;&gt;&gt; tuple2 = tuple1[:]&gt;&gt;&gt; tuple2(1, 2, 3, 4, 5, 6, 7, 8)&gt;&gt;&gt; temp = (1)&gt;&gt;&gt; temp1&gt;&gt;&gt; type(temp)&lt;class &apos;int&apos;&gt;&gt;&gt;&gt; temp2 = 2,3,4&gt;&gt;&gt; temp2(2, 3, 4)&gt;&gt;&gt; temp = ()&gt;&gt;&gt; temp()&gt;&gt;&gt; temp = (1,)&gt;&gt;&gt; type(temp)&lt;class &apos;tuple&apos;&gt;&gt;&gt;&gt; temp = 1,&gt;&gt;&gt; temp(1,) 元组的一些操作和列表相同 想创建元组，有逗号才行，且只有一个元素时，必须要加() 128*(8) = 648*(8,) = (8,8,8,8,8,8,8,8,) 当有了逗号就是元组，* 就变成了重复运算符 2.更新+删除一个元组1.更新：用分片形式1234&gt;&gt;&gt; temp = (&apos;wmz&apos;,&apos;ww&apos;,&apos;mm&apos;,&apos;zz&apos;)&gt;&gt;&gt; temp = temp[:2]+(&apos;7&apos;,)+temp[2:]&gt;&gt;&gt; temp(&apos;wmz&apos;, &apos;ww&apos;, &apos;7&apos;, &apos;mm&apos;, &apos;zz&apos;) 2.删除当元素们没有标签的时候，会自动回收。 3.元组相关操作符 拼接：&gt;&gt;&gt; temp = temp[:2]+(‘7’,)+temp[2:]但是拼接左右类型必须一样，元组拼接元组重复操作符关系操作符成员操作符 逻辑操作符的使用都跟列表一样 二、字符串及其内置方法1.字符串的操作12345678&gt;&gt;&gt; str1 = &apos;wmzzzz&apos;&gt;&gt;&gt; str1[:3]&apos;wmz&apos;&gt;&gt;&gt; str1[2]&apos;z&apos;&gt;&gt;&gt; str1 = str1[:2]+&apos;666&apos;+str1[2:]&gt;&gt;&gt; str1&apos;wm666zzzz&apos; 字符串的操作和元组一样，不能随意修改1234&gt;&gt;&gt; str1 = &apos;dhaksjdhaksjdhuiasdnkxcv56123135asdjkncasldknclx&apos;&gt;&gt;&gt; str1[::3]&apos;dkdkdidx523skadc&apos;# [::3]从第一个字符开始每隔两个取一个字符，即3的位置，包括第一个字符 2.字符串的方法及注释 三、小练习-字符串 四、字符串格式化1.位置参数12&gt;&gt;&gt; &apos;&#123;0&#125; love &#123;1&#125;.&#123;2&#125;&apos;.format(&apos;I&apos;,&apos;fishc&apos;,&apos;com&apos;)&apos;I love fishc.com&apos; 2.关键字参数12&gt;&gt;&gt; &apos;&#123;a&#125; love &#123;b&#125;.&#123;c&#125;&apos;.format(a = &apos;I&apos;,b = &apos;fishc&apos;,c = &apos;com&apos;)&apos;I love fishc.com&apos; 若位置参数和关键字参数一起使用，位置参数要在关键字参数之前12&gt;&gt;&gt; &apos;&#123;0&#125; love &#123;b&#125;.&#123;c&#125;&apos;.format(&apos;I&apos;,b = &apos;fishc&apos;,c = &apos;com&apos;)&apos;I love fishc.com&apos; 3.对花括号进行转义12&gt;&gt;&gt; &apos;&#123;&#123;0&#125;&#125;&apos;.format(&apos;asc&apos;)&apos;&#123;0&#125;&apos; 此时{0}已经不代表后面的位置了，而是单纯的{0} 4.格式化1234&gt;&gt;&gt; &apos;&#123;0:.1f&#125;&#123;1&#125;&apos;.format(27.658,&apos;GB&apos;)&apos;27.7GB&apos;&gt;&gt;&gt; &apos;&#123;0:.2f&#125;&#123;1&#125;&apos;.format(27.658,&apos;GB&apos;)&apos;27.66GB&apos; ：格式化符号的开始.1 四舍五入保留一位小数点f 打印出定点数（浮点数），即打印出来一个小数 5.各种格式化]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的列表]]></title>
    <url>%2F2019%2F03%2F05%2FPython%E7%9A%84%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[本讲讲述Python中的列表，在python中数组相当于集装箱，列表[]相当于工厂仓库，以下会进行讲解。 一、列表与数组python中的数组可以有任何形式的元素，如图所示。 1.创建一个普通列表1234567member = [&apos;wmz&apos;,&apos;www&apos;,&apos;mmm&apos;,&apos;zzz&apos;]member[&apos;wmz&apos;,&apos;www&apos;,&apos;mmm&apos;,&apos;zzz&apos;]number = [1,2,3,4]number[1,2,3,4] 2.创建一个混合列表123mix = [1,&apos;wmz&apos;,2,3,[1,2,3]]mix[1,&apos;wmz&apos;,2,3,[1,2,3]] 3.创建一个空列表123empty[]empty[] 二、向列表添加元素1.append() .是范围的意思 且一次只能添加一个元素,打了[]可以以列表形式添加进去（将参数作为一个元素增加到列表的末尾） 2.extend() 打了[]可以有多个元素，正常元素形式(将参数作为一个列表去扩展列表的末尾) 3.insert() 第一个数为位置，第二个为元素，只能有位置和一个元素。且开头的位置为0而不是1。 三、查找列表中的元素1234eg:mix = [1,&apos;wmz&apos;,2,3,[1,2,3]]mix[4][1,2,3] 四、从列表删除元素1.remove()123&gt;&gt;&gt; mix.remove(&apos;wmz&apos;)&gt;&gt;&gt; mix[1, 2, 3, [1, 2, 3]] 2.del语句123&gt;&gt;&gt; del mix[2]&gt;&gt;&gt; mix[1, 2, [1, 2, 3]] 3.pop()()中为空时，从列表中取出最后一个元素去除123456&gt;&gt;&gt; mix[1, 2, [1, 2, 3]]&gt;&gt;&gt; mix.pop()[1, 2, 3]&gt;&gt;&gt; mix[1, 2] 若pop()中有数字1234&gt;&gt;&gt; mix.pop(0)1&gt;&gt;&gt; mix[2] remove()内为字符串 del pop()内为数字即位置 五、列表分片(slice)1234567891011&gt;&gt;&gt; mix = [1,&apos;wmz&apos;,2,3,[1,2,3]]&gt;&gt;&gt; mix[1, &apos;wmz&apos;, 2, 3, [1, 2, 3]&gt;&gt;&gt; mix[1:3][&apos;wmz&apos;, 2]&gt;&gt;&gt; mix[:4][1, &apos;wmz&apos;, 2, 3]&gt;&gt;&gt; mix[1:][&apos;wmz&apos;, 2, 3, [1, 2, 3]]&gt;&gt;&gt; mix[:][1, &apos;wmz&apos;, 2, 3, [1, 2, 3]] 0可直接省略若想对列表进行拷贝等，且不想改变列表123&gt;&gt;&gt; mix2 = mix[:]&gt;&gt;&gt; mix2[1, &apos;wmz&apos;, 2, 3, [1, 2, 3]] 六、列表的一些常用操作符1.比较操作符12345678&gt;&gt;&gt; list1 = [123]&gt;&gt;&gt; list2 = [234]&gt;&gt;&gt; list1 &gt; list2False&gt;&gt;&gt; list1 = [123,789]&gt;&gt;&gt; list2 = [234,456]&gt;&gt;&gt; list1 &gt; list2False 多个元素比较时，比较0位置的数，后面不作比较 只能字符串和字符串，数字和数字之间比较，不能乱比 2.逻辑操作符1234567&gt;&gt;&gt; a = [1,2]&gt;&gt;&gt; b = [2,3]&gt;&gt;&gt; c = [3,4]&gt;&gt;&gt; (a&lt;b)and(a == b)False&gt;&gt;&gt; (a&lt;b)and(b&lt;c)True 3.连接操作符1234567&gt;&gt;&gt; a = [1,2]&gt;&gt;&gt; b = [2,3]&gt;&gt;&gt; c = [3,4]&gt;&gt;&gt; d = a+ b&gt;&gt;&gt; d[1, 2, 2, 3]但最好不要直接用加号，可以用加入元素等方法加入append()等。 4.重复操作符 *123456&gt;&gt;&gt; a*3[1, 2, 1, 2, 1, 2]&gt;&gt;&gt; a *= 3&gt;&gt;&gt; a[1, 2, 1, 2, 1, 2] 5.成员关系操作符1234567891011121314&gt;&gt;&gt; a = [1,2,3]&gt;&gt;&gt; a[1, 2, 3]&gt;&gt;&gt; a.append([&apos;wmz&apos;,666])&gt;&gt;&gt; a[1, 2, 3, [&apos;wmz&apos;, 666]]&gt;&gt;&gt; &apos;wmz&apos; in aFalse&gt;&gt;&gt; 1 in aTrue&gt;&gt;&gt; 5 not in aTrue&gt;&gt;&gt; &apos;wmz&apos; in a[3]True 成员操作符 in / not in只能管一层(break、continue) 对于列表中的列表如何索引12&gt;&gt;&gt; &apos;wmz&apos; in a[3]True 6.其他内置函数12&gt;&gt;&gt; dir(list) # list是列表的意思[&apos;__add__&apos;, &apos;__class__&apos;, &apos;__contains__&apos;, &apos;__delattr__&apos;, &apos;__delitem__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__getitem__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__iadd__&apos;, &apos;__imul__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__iter__&apos;, &apos;__le__&apos;, &apos;__len__&apos;, &apos;__lt__&apos;, &apos;__mul__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__reversed__&apos;, &apos;__rmul__&apos;, &apos;__setattr__&apos;, &apos;__setitem__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;append&apos;, &apos;clear&apos;, &apos;copy&apos;, &apos;count&apos;, &apos;extend&apos;, &apos;index&apos;, &apos;insert&apos;, &apos;pop&apos;, &apos;remove&apos;, &apos;reverse&apos;, &apos;sort&apos;] 1.count()count() 是计算列表中某一元素出现的次数1234&gt;&gt;&gt; a[1, 2, 3, [&apos;wmz&apos;, 666], 1, 2, 3, [&apos;wmz&apos;, 666], 1, 2, 3, [&apos;wmz&apos;, 666]]&gt;&gt;&gt; a.count(1)3 2.index()索引：返回参数在列表中的位置1234567&gt;&gt;&gt; a[1, 2, 3, [&apos;wmz&apos;, 666], 1, 2, 3, [&apos;wmz&apos;, 666], 1, 2, 3, [&apos;wmz&apos;, 666]]&gt;&gt;&gt; a.index(1)0&gt;&gt;&gt; a.index(1,2,6)4# 1,2,6 : 1是要查找的参数，2是起始位置，6是截止位置，表示在2,6之间的1的位置。 3.reverse()翻转整个列表123&gt;&gt;&gt; a.reverse()&gt;&gt;&gt; a[[&apos;wmz&apos;, 666], 3, 2, 1, [&apos;wmz&apos;, 666], 3, 2, 1, [&apos;wmz&apos;, 666], 3, 2, 1] 4.sort()对列表成员排序，默认从小到大排序（针对数字）。 从小到大 b.sort() 123456&gt;&gt;&gt; b = [6,5,8,9,4,55,2,33,6666]&gt;&gt;&gt; b[6, 5, 8, 9, 4, 55, 2, 33, 6666]&gt;&gt;&gt; b.sort()&gt;&gt;&gt; b[2, 4, 5, 6, 8, 9, 33, 55, 6666] 从大到小b.sort(reverse = True) 123&gt;&gt;&gt; b.sort(reverse=True)&gt;&gt;&gt; b[6666, 55, 33, 9, 8, 6, 5, 4, 2] 5.列表分片“拷贝”12345678910111213&gt;&gt;&gt; c = b[:]&gt;&gt;&gt; c[2, 4, 5, 6, 8, 9, 33, 55, 6666]&gt;&gt;&gt; d = b&gt;&gt;&gt; d[2, 4, 5, 6, 8, 9, 33, 55, 6666]&gt;&gt;&gt; b.reverse()&gt;&gt;&gt; b[6666, 55, 33, 9, 8, 6, 5, 4, 2]&gt;&gt;&gt; c[2, 4, 5, 6, 8, 9, 33, 55, 6666]&gt;&gt;&gt; d[6666, 55, 33, 9, 8, 6, 5, 4, 2] 分片:是复制，不会跟着变= 是赋值，会跟着变 在列表中若要拷贝记得用分片，若赋值会容易出错 七、小练习1.如何修改指定位置的元素 2.copy()123456&gt;&gt;&gt; a = [&apos;aaa&apos;]&gt;&gt;&gt; a[&apos;aaa&apos;]&gt;&gt;&gt; b = a.copy()&gt;&gt;&gt; b[&apos;aaa&apos;] 3.clear()123&gt;&gt;&gt; a.clear()&gt;&gt;&gt; a[] 清空列表元素，但列表仍在。 4.列表推导式或列表解析]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的分支和循环]]></title>
    <url>%2F2019%2F03%2F04%2FPython%E7%9A%84%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF%2F</url>
    <content type="text"><![CDATA[本讲将讲述python中的分支和循环。大方向：从上到下。分支：则进入不同的分支（if）。循环（while）：则会执行多次相同的代码。123456789101112131415- 单分支判断 if 条件: 条件满足时，执行语句... 双分支判断 if 条件: 条件满足时，执行语句... else: 条件不满足时，执行语句... 多分支判断: if 条件: 条件满足时，执行语句... elif 条件: 条件满足时，执行语句... else: 以上条件都不满足时，执行语句... 一、打飞机游戏1234567891011121314151617181920212223加载背景音乐播放背景音乐（设置单曲循环）我方飞机诞生interval = 0while true: if 用户是否点击了关闭按钮: 退出程序 interval += 1 if interval == 50: interval = 0 小飞机诞生 小飞机移动一个位置 屏幕刷新 if 用户鼠标产生移动: 我方飞机中心位置 = 用户鼠标位置 屏幕刷新 if 我方飞机与小飞机发生肢体冲突: 我方挂，播放撞击音乐 修改我方飞机图案 打印&apos;game over&apos; 停止背景音乐，最好淡出 二、分数游戏1234567891011score = int(input(&apos;请输入一个分数：&apos;))if 100 &gt;= score &gt;=90: print(&apos;A&apos;)elif 90&gt;score&gt;80: print(&apos;B&apos;)elif 80&gt;score&gt;60: print(&apos;C&apos;)elif 60&gt;score&gt;=0: print(&apos;D&apos;)else: print(&apos;输入错误&apos;) elif = else if 若是if else用法 则第一个if为真后就不会执行后面的if，若只是if语句，则每一条if都要执行，很慢。 三、条件操作符（三元/三目操作符） 四、assert（断言） assert的作用：当assert关键字后面的条件为假的时候，程序自动崩溃并抛出assertionerror的异常。什么情况下我们会需要这样的代码呢？当我们在测试程序的时候就很好用，因为与其让错误的条件导致程序今后莫名其妙的崩溃，不如在错误条件出现的那一瞬间实现“自爆”。一般来说我们可以用ta在程序中置入检查点，当需要确保程序中的某个条件一定为真才能让程序正常工作的话，assert关键字就非常有用了。 五、小练习1.变量互换假设有x = 1，y = 2，z = 3，请问如何快速将三个变量的值互相交换？x,y,z, = z,y,x 2.成员资格运算符in：用于检查一个值是否在序列中，如果在序列中返回true，否则返回false。12345name = &apos;wmz&apos;&apos;w&apos; in nametrue&apos;f&apos; in name false 3.三元操作符small = x if(x &lt; y and x &lt; z) else (y if y &lt; z else z) 六、while 循环12while 条件: 循环体 条件为真，执行循环体。 七、for循环 语法：for 目标 in 表达式: 循环体 12345abc= = &apos;me&apos;for i in abc: print(i,end=&apos; &apos;)m e 1234567891011[]:列表abc = [&apos;1&apos;,&apos;小羊羔&apos;,&apos;6&apos;,&apos;666&apos;]for aaa in abc: print(aaa,len(aaa))1 1小羊羔 36 1666 3其中的‘目标’并不是要在abc内，跟上面直接用in不一样 八、range() range常与for进行搭配，其中step为步径。 九、两个关键语句1.break终止当前循环，跳出循环体.且break只能跳出一层循环。 2.continue终止本轮循环，并执行下一循环，在执行下一循环之前，ta会先测试这个循环条件，只有在这个条件为true的情况下才会执行，若false则退出循环。 理解下图即理解break+continue： 十、小练习2 设计一个验证用户密码程序，用户只有三次机会输入错误，不过如果用户输入的内容中包含 * 则不计算在内。(执行有问题，还未修改) 1234567891011121314count = 3password = &apos;wmz&apos;while count: passwd = input(&apos;请输入密码：&apos;) if passwd == password: print(&apos;yes&apos;) break elif &apos;*&apos;in password: print(&apos;密码中不能含有&apos;*&apos;号，您还有&apos;,count,&apos;次机会&apos;,end=&apos; &apos;) continue else: print(&apos;no,您还有&apos;,count,&apos;次机会&apos;,end=&apos; &apos;) count -=1 1234567891011121314151617181920212223for red in range(0,4): for yellow in range(0,4): for green in range(2,7): if red+yellow+green == 8: print(red,&apos;\t&apos;,yellow,&apos;\t&apos;,green)red yellow green0 2 60 3 51 1 61 2 51 3 42 0 62 1 52 2 42 3 33 0 53 1 43 2 33 3 2\t :横向制表符\v :纵向制表符]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Python的部分数值类型+常用操作符]]></title>
    <url>%2F2019%2F02%2F28%2FPython%E7%9A%84%E9%83%A8%E5%88%86%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%2B%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[一、Python的一些数值类型1.整型：整数2.浮点型；小数 3.e记法：科学计数法 （肥肠大或者小的数） eg：0.000000000000000000000000000000006 = 6e-3315e10 = 150000000000.0 e=10 e10 = e的10次方 4.布尔类型：true = 1 false = 0 true + true = 2 true + false = 1 （知道就行，别乱用） 因为计算机只识别二进制数0 1 所以用0 1代表false true 二、类型转换 1.int() 整数注意： int()中不能有除了数字以外的东西 浮点型转化为整数时，对小数点后面的数采取截断，而不是四舍五入 2.float() 浮点数1234&gt;&gt;&gt;a = &apos;520&apos;&gt;&gt;&gt;b = float(a)&gt;&gt;&gt;b520.0 3.str() 字符串12345678a = 5.99b = str(a)b&apos;5.99&apos;c = str(5e19)c&apos;5e+19&apos;+号是变大，-号是变小，即10的正/负几次方 4.type() isinstance()用法：获得关于类型的信息建议使用isinstance，较直接，且type()会有别的用处 5.ps： temp = input(‘猜个数字:’) while type(temp)!=type(1): print(‘sorry 不合法’,end=’’) temp = input(‘请输入一个整数:’) 但是input()的返回值始终是字符串，所以type(temp)永远是 三、小练习：判断一个年份是否为闰年1234567891011temp = input(&apos;请输入一个年份：&apos;)while not temp.isdigit(): print(&apos;抱歉错了 请输入一个整数：&apos;)year = int(temp)if year/400 == int(year/400): print(temp+&apos;是闰年！&apos;)else: if (year/4 == int(year/4)) and (year/100 != int(year/100)): print(temp + &apos;是闰年！&apos;) else: print(temp +&apos;不是闰年！&apos;) 四、常用操作符1.常用操作符的分类及等级 c = 10 c * 10 = 100 或 c = 10 c *= 10 c = 100(加减乘除同样适用) %取余数 幂运算操作符比其左侧的一元操作符优先级高，比其右侧一元操作符优先级低。 3 ** -2 = 0.1111 3 ** (-2)=0.1111 -(3 ** 2)=-9 即左高右低 not &gt; and &gt; or eg: 请用最快速度说出答案：not 1 or 0 and 1 or 3 and 4 or 5 and 6 or 7 and 8 and 9 解：（not 1） or （0 and 1） or （3 and 4） or （5 and 6） or （7 and 8 and 9） == 0 or 0 or 4 or 6 or 9 == 4 因为“短路逻辑”，3 and 4 = 4, 3 or 4 = 3,两边都不是0的情况下 and 直接取后面的值，or 直接取前面的值。如果存在0的情况，and 直接取0，or 直接取非0，false是 0 ，所以 0 or 0 or 4 or 6 or 9 ，第一个不为0的是 4 ，所以是4 ，0 or 0是 0 六、小练习1.请写一个程序打印出0-100所有的奇数1234567i = 0while i&lt;=100: if i%2 != 0: print(i,end=&apos; &apos;) i +=1 else: i +=1 2.有一个长阶梯，若每步上2阶，最后剩1阶；若每步上3阶，最后剩2阶；若每步上5阶，最后剩4阶；若每步上6阶，最后剩5阶；只有每步上7阶，最后刚好一阶也不剩。求该阶梯有多少阶？12345678910111213x = 7i = 1flag = 0while i&lt;=100: if (x%2 == 1)and(x%3 == 2)and(x%5 == 4)and(x%6 == 5): flag = 1 else: x = 7*(i+1) i +=1if flag ==1: print(&apos;阶梯数：&apos;,x)else: print(&apos;no&apos;) flag一般为标记的意思，题中flag = 1，即标记为真]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据插入+自动编号]]></title>
    <url>%2F2019%2F02%2F18%2FMySQL%E6%95%B0%E6%8D%AE%E6%8F%92%E5%85%A5%2B%E8%87%AA%E5%8A%A8%E7%BC%96%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[一、单表数据插入1.为表的所有列插入数据123insert into 表名(列名1，列名2....)values(value_list);insert into T_student(id,name,gender,hobbies)values(4,&apos;汪峰&apos;,1,&apos;当导师&apos;); 2.为表的指定列插入数据123insert into 表名(列名1，列名2....)values(value_list);insert into T_student(id,name,gender)values(4,&apos;汪峰&apos;,1); 3.同时插入多条记录123insert into 表名(列名1，列名2....)values(value1),(value2),...(valuen);insert into T_student(id,name,gender,hobbies)values(4,&apos;汪峰&apos;,1,&apos;当导师&apos;),(6,&apos;wmz&apos;,2,&apos;aaa&apos;); 4.将查询结果插入到表中insert into bookcategory select * from test where category_id&lt;3; insert和select中的列名不需要完全相同，事实上MySQL甚至不关心select返回的列名，它使用的是列的位置。且插入的数据结构必须一致，不然会因数据类型不同等而不能插入。 二、设置自动编号1.设置表的属性值自动增加语法格式：列名 数据类型 auto_increment auto_increment约束的字段可以是任何整数类型（tinyint，smallint，int等）。 2.为已有的表添加自增列alter table bookcategory modify category_id int auto_increment; 若想给有关联关系的表添加自动编号，则先去掉关联关系，设置完后再关联上。 3.修改自增列的起始值alter table bookcategory auto_increment=x; 修改后auto_increment列起始值从x开始。 4.去掉自增列alter table bookcategory modify category_id int;]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL约束]]></title>
    <url>%2F2019%2F02%2F18%2FMySQL%E7%BA%A6%E6%9D%9F%2F</url>
    <content type="text"><![CDATA[一、什么是约束约束是一种限制，它通过对表的行或列的数据做出限制，来确保表的数据的完整性、唯一性。 二、约束的类型1.非空约束空值：null 字段值可以为空非空：not null 字段值禁止为空 2.主键约束主键列的数据唯一，且不能为空，其值能够唯一区分表中每个行，列如用身份证号可以确定一个人；主键也可以是组合，例如家乡+门牌号可以确定一个人。 每个表都应有一个主键 不更新主键列中的值 不重用主键列中的值 不在主键列中使用可能会更改的值 3.唯一约束该列唯一，允许为空 唯一约束与主键约束的区别： 一个表中可以有多个唯一约束，但只能有一个主键约束 主键列不能为空 唯一约束列可以 4.默认约束指定某列的默认值 5.外键约束 先建立父表再建立子表 cascade 删除表时，有关联的表先删子表再删父表，没有关联关系的可以一起删除。三、约束语句总结红色字体是与黑色字体不同格式的语句。]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL数据库表结构的操作]]></title>
    <url>%2F2019%2F02%2F18%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[本讲是关于数据库表的结构的常用操作。 一、创建+查看数据库表 创建数据库表命令create table 表名(列名1 数据类型[列级别约束条件][默认值]列名2 数据类型[列级别约束条件][默认值]…..[表级别约束条件])use 数据库名(此处举例为book); 123456789use book;create table reader( card_id char(18), name varchar(10), sex enum(&apos;男&apos;,&apos;女&apos;), age int, tel char(11), balance decimal(7,3) ); 查看数据表 查看数据表有哪些：show tables from book; 查看数据表结构：desc reader; 查看创建数据表的详细结构语句：show create table reader 二、修改数据库表添加列的命令(在已存在的表添加新的列)：alter table 表名 add 新列名 数据类型 [约束条件][first|after已存在列名]注：add 是自动追加到已有列后面，若想指定列的位置 可用first|after 这个方法追加到某列后面。[ ]中间的都是可选项，可有可无。 添加列 12alter table reader add email varchar(30);desc reader; 添加有条件的列 afteralter table reader add email2 varchar(30) after tel; firstfirst是在所有列之前添加alter table reader add email3 varchar(30) first; 修改列名 123alter table 表名 change 旧列名 新列名 新数据类型；alter table reader change email2 email_bak varchar(30); 修改列的数据类型 123alter table 表名 modify 列名 数据类型alter table reader modify email varchar(25); 改变表中列的相对位置 123alter table 表名 modify 列1 数据类型 first|after 列2;alter table reader modify balance decimal(7,3) after email; 删除列 123alter table 表名 drop 列名;alter table reader drop email_bak; 修改表名 1234alter table 旧表名 rename 新表名alter table reader rename wmz;show tables; 删除数据库表 1drop table[if exists]表1，表2，表3，...表n; 三、表分区当我们创建的表，需要承载的数据量很大时，就要注意他的性能问题，比如图书信息表，有1000万个图书信息，那么就得考虑如何优化它，其中一种方式就是表分区。表分区就是把一张表的数据分成多个区块，这些区块可以再同一个磁盘上也可以在不同的磁盘上，但所有的数据还在一个表中。要想表分区，前提是你的数据库必须支持，输入:show plugins;若有partition active一行则可以。 数据库的表分区有两种形式： 水平：将表的数据按行分隔成不同的数据文件 垂直：将表的数据按列分隔成不同的数据文件eg（以水平分区为例）：]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Python]]></title>
    <url>%2F2019%2F02%2F17%2F%E5%88%9D%E8%AF%86python%2F</url>
    <content type="text"><![CDATA[本站使用的是python3，python3的安装肥肠简单，一路next即可。 一、什么是python Python是脚本语言 脚本语言(Scripting language)是电脑编程语言，因此也能让开发者藉以编写出让电脑听命行事的程序。以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于这项原则，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。一个脚本可以使得本来要用键盘进行的相互式操作自动化。一个Shell脚本主要由原本需要在命令行输入的命令组成，或在一个文本编辑器中，用户可以使用脚本来把一些常用的操作组合成一组串行。主要用来书写这种脚本的语言叫做脚本语言。很多脚本语言实际上已经超过简单的用户命令串行的指令，还可以编写更复杂的程序。 IDLE IDLE是一个Python Shell，我们通常就是用IDLE来互动Python。shell的意思就是“外壳”，基本上来说，就是一个通过键入文本与程序交互的途径。像我们Windows那个cmd窗口，像Linux那个黑乎乎的命令窗口，他们都是shell，利用他们，我们就可以给操作系统下达命令。打开IDLE路径：\lib\idlelib\idle.bat 二、常用操作命令 注释：# 返回上一句：alt+n 返回下一句：alt+p 缩进：tab (打冒号回车会自动tab) print()：会在输出窗口中显示一些文本（输出窗口就是IDLE shell窗口） ==：判断是否相等 =：赋值 从右往左搬 temp：字符串 bif == built-in functions：内置函数（68个） 查看全部内置函数(其中小写的): dir(builtins) 查看内置函数解释：help(input) 如何在字符串中嵌入一个双引号：利用反斜杠（\）对双引号转义：\”，或者用单引号引起这个字符串。例如：’ I l”o”ve fishc.com ‘ python不用；来表示语句的结束 可用来表示语句之间的分隔 引号可用单引号也可用双引号，但成对出现时两个必须都单或都双 python区分大小写 三、拼接即字符串的”相加”：’5’+’a8’ = ‘5a8’ 为什么 &gt;&gt;&gt;print(‘I love fishc.com ‘ * 5) 可以正常执行，但 &gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 却报错？在 Python 中不能把两个完全不同的东西加在一起，比如说数字和文本，正是这个原因，&gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 才会报错。这就像是在说“五只小甲鱼加上苍井空会是多少？”一样没有多大意义，结果可能是五，可能是六，也可能是八！不过乘以一个整数来翻倍就具有一定的意义了，前边的例子就是将 “I love fishc.com” 这个字符串打印五次。 四、小练习 11.123456789print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)if guess == 8: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;)else: print(&quot;猜错了辣鸡&quot;)print(&quot;886&quot;) 2.编写程序：calc.py 要求用户输入1到100之间数字并判断，输入符合要求打印“你妹好漂亮”，不符合要求则打印“你大爷好丑”123456temp = input(&quot;请输入1到100之间的数字：&quot;)num = int(temp)if 1 &lt;= num &lt;= 100: print(&apos;你妹好漂亮&apos;)else: print(&apos;你大爷好丑&apos;) 以后会对以上的弱智小游戏进行改进，今天就到这啦！ 五、变量 变量名： a. 变量名就像我们的名字，把一个值赋值给一个名字时，Ta会存储在内存中，称之为变量（variable），在大多数语言中，把这种行为成为“给变量赋值”或“把值存储在变量中”。 b. 而Python稍有不同，她并不是把值存储在变量中，而更像是把名字贴在值的上面。 c. 所以有种说法是Python没有“变量”，只有“名字”。 需要注意的地方： a. 使用变量之前，需要先对其赋值。 b. 变量名可以包括字母、数字、下划线，但变量名不能以数字开头。 c. 字母可大写可小写，但不同。 d. 符号 = 是赋值的意思，从右往左赋，即左边是名字，右边是值。 e. 尽量给变量取一个专业的名字：teacher =’xwtongxue’ 而不是t =’xwtongxue’ 六、字符串 字符串也叫文本，用引号括起来 字符串两边要加上成对的引号，单或双都可以，但不可一单一双 要在字符串中出现单引号或双引号时： 可用\对字符串中的引号进行转义，如let\&#39;s go! 或者用单引号或双引号来转化，如i &quot;love&quot; u 原始字符串 长字符串：若希望得到一个跨越多行的字符串，例如：你存在， 我婶婶的脑海里， 我的梦里 我的心里 呱唧呱呱呱呱呱呱 我的歌声里。。。 这里我们就要用到三重引号字符串。 七、游戏改进 在改进之前先了解一下Python的条件分支语法：1234if 条件: 条件为真执行的操作else: 条件为假执行的操作 改进一：提示用户数字猜大了还是小了123456789101112print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)if guess == 8: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;)else: if guess &gt; 8 print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;)print(&quot;886&quot;) Python的while循环语法 12while 条件: 条件为真执行的操作（循环体） 比较操作符&gt;逻辑操作符 即&gt; 比and 先执行，若想改变顺序可用()改变。 改进二：每次运行程序产生的答案是随机的我们需要引入：random模块，模块也就是我们所编写的，在按F5运行时即run module。在random模块里有一个函数叫randint()，它会返回一个随机的整数。 1234567891011121314151617import randomsecret = random.randint(1,10)print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)while guess != secret: tem = input(&apos;错啦，请重新输入吧：&apos;) guess = int(temp) if guess == secret: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;) else: if guess &gt; secret print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;)print(&quot;886&quot;) 改进三：给用户三次猜的机会 12345678910111213141516171819202122232425import randomtimes = 3secret = random.randint(1,10)print(&apos;------我是分割线-----&apos;)# 这里先给guess赋值（赋一个绝对不等于secret的值）guess = 0# print() 默认打印完字符串会自动添加一个换行符 ,end=&apos;&apos;参数告诉print()用空格代替换行，或任何&apos;&apos;中间的内容print(&quot;猜一下我想的是什么数字:&quot;,end=&apos; &apos;)while (guess != secret) and (times &gt; 0): tem = input() guess = int(temp) times = times - 1 # 用户每输入一次，可用机会-1 if guess == secret: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;) else: if guess &gt; secret print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;) if times &gt; 0: print(&apos;再试一次吧：&apos;,end=&apos; &apos;) else: print(&apos;机会用光啦！&apos;)print(&quot;886&quot;) 八、小练习 2 尝试写代码实现以下功能： 1234567temp = input(&apos;请输入一个整数;&apos;)number = int(temp)i = 1while number: print(i) i = i+1 number = number - 1 尝试写代码实现以下功能： 12345678910111213temp = input(&apos;请输入一个整数：&apos;)number = int(temp)while number: i = number - 1 while i: print(&apos; &apos;,end=&apos;&apos;) i = i-1 j = number while j: print(&apos;*&apos;,end = &apos;&apos;) j = j-1 print() number = number - 1 Python近期就先到这里，MySQL更新完再来啦！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL了解及基本命令操作]]></title>
    <url>%2F2019%2F02%2F16%2FMySQL%E4%BA%86%E8%A7%A3%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[一、前言本站所讲的MySQL均为基于DOS环境下的常用基础操作。MySQL常与数据库同时出现，在了解MySQL之前，我们先要了解一下数据库。数据库：通过DBMS（数据库管理系统）创建和操纵的容器MySQL：一种DBMS MySQL里面有很多数据库，那么数据是直接存在数据库里的吗？并不，数据库底下还有一个叫做数据表的存储单元，数据表里面才存储数据。打个比方，好比一座大图书馆，就是MySQL，图书馆里面分南库，北库，这就是数据库，每个库里面的书都是放在书架上的，书架就是数据表，而放在书架上的很多本书，就是数据。所以按大小顺序排个序就应该是: MySQL&gt;数据库&gt;数据表&gt;数据 其实，数据库究竟是什么并不重要，因为我们不直接访问数据库，而是使用DBMS（此处指MySQL），它替我们访问数据库。 二、MySQL的登录+退出1. 登录MySQL在登录MySQL之前，我们先要了解几个参数的意义我们在登录时，可输入：mysql -h127.0.0.1 -uroot -p回车后输入密码即可登录。 2. 修改用户密码既然提到了登录密码，就来讲一下如何修改密码，mysqladmin命令用于修改用户密码：mysqladmin -uroot -p原密码 password按命令给出新密码即可。 3. 退出MySQL输入：exit或quit或\q 4. MySQL的启动+停止登录MySQL后可用以下命令控制MySQL启动：net start mysql停止：net stop mysql 三、MySQL的常用命令在SQL语句中，我们常以 ; 来结束一条语句，且必须是英文形式 1. 显示数据库show databases; Information_schema：数据库的原数据信息，数据库名字，字段名等Mysql：用户信息 权限等Performance_schema 数据库服务器的一些性能参数Sys：系统的运行信息 2. 使用数据库use 数据库名称;必须先使用use打开数据库，才能读取其中的数据。 3. select命令 显示当前连接的数据库select databases(); 显示当前服务器版本select version(); 显示当前日期时间select now(); 显示当前用户select user; 4. 创建数据库create database 数据库名称; 5. 删除数据库drop database 数据库名称; 四、数据类型1. 整型存储范围越大 所占字节越多 适当选取 2. 浮点数类型和定点数类型 3. 日期时间型Timestamp时间范围小于datetime 4. 字符串型字符串是由数字、字母、下划线组成的一串字符字符串：用’’限定数值列：不用eg：’123’+’123’=’123123’ 字符串拼接 123+123=246 数值加减Char（M）定长Varchar（M）变长 一个字节存储一个汉字Text 文本Enum：枚举Set：组int 整型tinyint 整型（0-256）decimal 浮点型（总位数，小数位数） 例如 decimal(3,1)char(X) 定长字符型 例如 char(10)varchar(X) 可变长度字符型 例如varchar（10）text 大段文本binary 二进制（存储照片等）]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在前面]]></title>
    <url>%2F2019%2F02%2F15%2F%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[搭了三天的博客终于基本完工了！可能是因为作者我太蠢了，来来回回走一步卡三步的！但这是我人生中第一个正儿八经的博客，还是有（非）点（常）开心的，用人生中第一篇博客文章纪念一下哈哈哈哈哈！我是非计算机相关专业的，以前对程序方面的东西涉猎不多，接触到这个博客完全是受wltongxue的影响，在此特别鸣谢wltongxue对我的爱与鼓励！搭建这样一个空间，只是想对平日里学到的东西做一个记录,毕竟忘的太快了（搭完博客要写的学习笔记已经要忘完了），记在word里又并不想看。可能大多数人用hexo来做很多技术型的分享，但目前我只把她当作一个自己的学习记录空间（应该没有人用这个来记录情感生活）如果有一天xwtongxue的笔记发扬光大了我就来把前面这句话删了！隔行如隔山，只希望能尽量多学多记录一些有用的东西。 我脑海中的画面是，一个漫游者日出时站在无名的路上，太阳升起来了，火车从旁边呼啸而过。这个年轻人的心情是如此自由，他有点饿，也知道得很清楚，自己对前面的道路一无所知。 写不下去了。。收拾收拾睡一会儿，希望开学前能把学的东西更新完。。]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
