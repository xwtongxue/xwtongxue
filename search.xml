<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MySQL数据库表结构的操作]]></title>
    <url>%2F2019%2F02%2F18%2FMySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E7%BB%93%E6%9E%84%E7%9A%84%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[本讲是关于数据库表的结构的常用操作。 一、创建+查看数据库表 创建数据库表命令create table 表名(列名1 数据类型[列级别约束条件][默认值]列名2 数据类型[列级别约束条件][默认值]…..[表级别约束条件])use 数据库名(此处举例为book); 123456789use book;create table reader( card_id char(18), name varchar(10), sex enum(&apos;男&apos;,&apos;女&apos;), age int, tel char(11), balance decimal(7,3) ); 查看数据表 查看数据表有哪些：show tables from book; 查看数据表结构：desc reader; 查看创建数据表的详细结构语句：show create table reader 二、修改数据库表添加列的命令(在已存在的表添加新的列)：alter table 表名 add 新列名 数据类型 [约束条件][first|after已存在列名]注：add 是自动追加到已有列后面，若想指定列的位置 可用first|after 这个方法追加到某列后面。[ ]中间的都是可选项，可有可无。 添加列 12alter table reader add email varchar(30);desc reader; 添加有条件的列 afteralter table reader add email2 varchar(30) after tel; firstfirst是在所有列之前添加alter table reader add email3 varchar(30) first; 修改列名 123alter table 表名 change 旧列名 新列名 新数据类型；alter table reader change email2 email_bak varchar(30); 修改列的数据类型 123alter table 表名 modify 列名 数据类型alter table reader modify email varchar(25); 改变表中列的相对位置 123alter table 表名 modify 列1 数据类型 first|after 列2;alter table reader modify balance decimal(7,3) after email; 删除列 123alter table 表名 drop 列名;alter table reader drop email_bak; 修改表名 1234alter table 旧表名 rename 新表名alter table reader rename wmz;show tables; 删除数据库表 1drop table[if exists]表1，表2，表3，...表n; 三、表分区当我们创建的表，需要承载的数据量很大时，就要注意他的性能问题，比如图书信息表，有1000万个图书信息，那么就得考虑如何优化它，其中一种方式就是表分区。表分区就是把一张表的数据分成多个区块，这些区块可以再同一个磁盘上也可以在不同的磁盘上，但所有的数据还在一个表中。要想表分区，前提是你的数据库必须支持，输入:show plugins;若有partition active一行则可以。 数据库的表分区有两种形式： 水平：将表的数据按行分隔成不同的数据文件 垂直：将表的数据按列分隔成不同的数据文件eg（以水平分区为例）：]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识Python]]></title>
    <url>%2F2019%2F02%2F17%2F%E5%88%9D%E8%AF%86python%2F</url>
    <content type="text"><![CDATA[本站使用的是python3，python3的安装肥肠简单，一路next即可。 一、什么是python Python是脚本语言 脚本语言(Scripting language)是电脑编程语言，因此也能让开发者藉以编写出让电脑听命行事的程序。以简单的方式快速完成某些复杂的事情通常是创造脚本语言的重要原则，基于这项原则，使得脚本语言通常比 C语言、C++语言 或 Java 之类的系统编程语言要简单容易。一个脚本可以使得本来要用键盘进行的相互式操作自动化。一个Shell脚本主要由原本需要在命令行输入的命令组成，或在一个文本编辑器中，用户可以使用脚本来把一些常用的操作组合成一组串行。主要用来书写这种脚本的语言叫做脚本语言。很多脚本语言实际上已经超过简单的用户命令串行的指令，还可以编写更复杂的程序。 IDLE IDLE是一个Python Shell，我们通常就是用IDLE来互动Python。shell的意思就是“外壳”，基本上来说，就是一个通过键入文本与程序交互的途径。像我们Windows那个cmd窗口，像Linux那个黑乎乎的命令窗口，他们都是shell，利用他们，我们就可以给操作系统下达命令。打开IDLE路径：\lib\idlelib\idle.bat 二、常用操作命令 注释：# 返回上一句：alt+n 返回下一句：alt+p 缩进：tab (打冒号回车会自动tab) print()：会在输出窗口中显示一些文本（输出窗口就是IDLE shell窗口） ==：判断是否相等 =：赋值 从右往左搬 temp：字符串 bif == built-in functions：内置函数（68个） 查看全部内置函数(其中小写的): dir(builtins) 查看内置函数解释：help(input) 如何在字符串中嵌入一个双引号：利用反斜杠（\）对双引号转义：\”，或者用单引号引起这个字符串。例如：’ I l”o”ve fishc.com ‘ python不用；来表示语句的结束 可用来表示语句之间的分隔 引号可用单引号也可用双引号，但成对出现时两个必须都单或都双 python区分大小写 三、拼接即字符串的”相加”：’5’+’a8’ = ‘5a8’ 为什么 &gt;&gt;&gt;print(‘I love fishc.com ‘ * 5) 可以正常执行，但 &gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 却报错？在 Python 中不能把两个完全不同的东西加在一起，比如说数字和文本，正是这个原因，&gt;&gt;&gt;print(‘I love fishc.com ‘ + 5) 才会报错。这就像是在说“五只小甲鱼加上苍井空会是多少？”一样没有多大意义，结果可能是五，可能是六，也可能是八！不过乘以一个整数来翻倍就具有一定的意义了，前边的例子就是将 “I love fishc.com” 这个字符串打印五次。 四、小练习 11.123456789print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)if guess == 8: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;)else: print(&quot;猜错了辣鸡&quot;)print(&quot;886&quot;) 2.编写程序：calc.py 要求用户输入1到100之间数字并判断，输入符合要求打印“你妹好漂亮”，不符合要求则打印“你大爷好丑”123456temp = input(&quot;请输入1到100之间的数字：&quot;)num = int(temp)if 1 &lt;= num &lt;= 100: print(&apos;你妹好漂亮&apos;)else: print(&apos;你大爷好丑&apos;) 以后会对以上的弱智小游戏进行改进，今天就到这啦！ 五、变量 变量名： a. 变量名就像我们的名字，把一个值赋值给一个名字时，Ta会存储在内存中，称之为变量（variable），在大多数语言中，把这种行为成为“给变量赋值”或“把值存储在变量中”。 b. 而Python稍有不同，她并不是把值存储在变量中，而更像是把名字贴在值的上面。 c. 所以有种说法是Python没有“变量”，只有“名字”。 需要注意的地方： a. 使用变量之前，需要先对其赋值。 b. 变量名可以包括字母、数字、下划线，但变量名不能以数字开头。 c. 字母可大写可小写，但不同。 d. 符号 = 是赋值的意思，从右往左赋，即左边是名字，右边是值。 e. 尽量给变量取一个专业的名字：teacher =’xwtongxue’ 而不是t =’xwtongxue’ 六、字符串 字符串也叫文本，用引号括起来 字符串两边要加上成对的引号，单或双都可以，但不可一单一双 要在字符串中出现单引号或双引号时： 可用\对字符串中的引号进行转义，如let\&#39;s go! 或者用单引号或双引号来转化，如i &quot;love&quot; u 原始字符串 长字符串：若希望得到一个跨越多行的字符串，例如：你存在， 我婶婶的脑海里， 我的梦里 我的心里 呱唧呱呱呱呱呱呱 我的歌声里。。。 这里我们就要用到三重引号字符串。 七、游戏改进 在改进之前先了解一下Python的条件分支语法：1234if 条件: 条件为真执行的操作else: 条件为假执行的操作 改进一：提示用户数字猜大了还是小了123456789101112print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)if guess == 8: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;)else: if guess &gt; 8 print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;)print(&quot;886&quot;) Python的while循环语法 12while 条件: 条件为真执行的操作（循环体） 比较操作符&gt;逻辑操作符 即&gt; 比and 先执行，若想改变顺序可用()改变。 改进二：每次运行程序产生的答案是随机的我们需要引入：random模块，模块也就是我们所编写的，在按F5运行时即run module。在random模块里有一个函数叫randint()，它会返回一个随机的整数。 1234567891011121314151617import randomsecret = random.randint(1,10)print(&apos;------我是分割线-----&apos;)temp = input(&quot;猜一下我想的是什么数字&quot;)guess = int(temp)while guess != secret: tem = input(&apos;错啦，请重新输入吧：&apos;) guess = int(temp) if guess == secret: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;) else: if guess &gt; secret print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;)print(&quot;886&quot;) 改进三：给用户三次猜的机会 12345678910111213141516171819202122232425import randomtimes = 3secret = random.randint(1,10)print(&apos;------我是分割线-----&apos;)# 这里先给guess赋值（赋一个绝对不等于secret的值）guess = 0# print() 默认打印完字符串会自动添加一个换行符 ,end=&apos;&apos;参数告诉print()用空格代替换行，或任何&apos;&apos;中间的内容print(&quot;猜一下我想的是什么数字:&quot;,end=&apos; &apos;)while (guess != secret) and (times &gt; 0): tem = input() guess = int(temp) times = times - 1 # 用户每输入一次，可用机会-1 if guess == secret: print(&quot;你真聪明！&quot;) print(&quot;但也没有奖励&quot;) else: if guess &gt; secret print(&apos;哎呀大了大了！&apos;) else: print(&apos;小了小了！&apos;) if times &gt; 0: print(&apos;再试一次吧：&apos;,end=&apos; &apos;) else: print(&apos;机会用光啦！&apos;)print(&quot;886&quot;) 八、小练习 2 尝试写代码实现以下功能： 1234567temp = input(&apos;请输入一个整数;&apos;)number = int(temp)i = 1while number: print(i) i = i+1 number = number - 1 尝试写代码实现以下功能： 12345678910111213temp = input(&apos;请输入一个整数：&apos;)number = int(temp)while number: i = number - 1 while i: print(&apos; &apos;,end=&apos;&apos;) i = i-1 j = number while j: print(&apos;*&apos;,end = &apos;&apos;) j = j-1 print() number = number - 1 Python近期就先到这里，MySQL更新完再来啦！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MySQL了解及基本命令操作]]></title>
    <url>%2F2019%2F02%2F16%2FMySQL%E4%BA%86%E8%A7%A3%E5%8F%8A%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C%2F</url>
    <content type="text"><![CDATA[一、前言本站所讲的MySQL均为基于DOS环境下的常用基础操作。MySQL常与数据库同时出现，在了解MySQL之前，我们先要了解一下数据库。数据库：通过DBMS（数据库管理系统）创建和操纵的容器MySQL：一种DBMS MySQL里面有很多数据库，那么数据是直接存在数据库里的吗？并不，数据库底下还有一个叫做数据表的存储单元，数据表里面才存储数据。打个比方，好比一座大图书馆，就是MySQL，图书馆里面分南库，北库，这就是数据库，每个库里面的书都是放在书架上的，书架就是数据表，而放在书架上的很多本书，就是数据。所以按大小顺序排个序就应该是: MySQL&gt;数据库&gt;数据表&gt;数据 其实，数据库究竟是什么并不重要，因为我们不直接访问数据库，而是使用DBMS（此处指MySQL），它替我们访问数据库。 二、MySQL的登录+退出1. 登录MySQL在登录MySQL之前，我们先要了解几个参数的意义我们在登录时，可输入：mysql -h127.0.0.1 -uroot -p回车后输入密码即可登录。 2. 修改用户密码既然提到了登录密码，就来讲一下如何修改密码，mysqladmin命令用于修改用户密码：mysqladmin -uroot -p原密码 password按命令给出新密码即可。 3. 退出MySQL输入：exit或quit或\q 4. MySQL的启动+停止登录MySQL后可用以下命令控制MySQL启动：net start mysql停止：net stop mysql 三、MySQL的常用命令在SQL语句中，我们常以 ; 来结束一条语句，且必须是英文形式 1. 显示数据库show databases; Information_schema：数据库的原数据信息，数据库名字，字段名等Mysql：用户信息 权限等Performance_schema 数据库服务器的一些性能参数Sys：系统的运行信息 2. 使用数据库use 数据库名称;必须先使用use打开数据库，才能读取其中的数据。 3. select命令 显示当前连接的数据库select databases(); 显示当前服务器版本select version(); 显示当前日期时间select now(); 显示当前用户select user; 4. 创建数据库create database 数据库名称; 5. 删除数据库drop database 数据库名称; 四、数据类型1. 整型存储范围越大 所占字节越多 适当选取 2. 浮点数类型和定点数类型 3. 日期时间型Timestamp时间范围小于datetime 4. 字符串型字符串是由数字、字母、下划线组成的一串字符字符串：用’’限定数值列：不用eg：’123’+’123’=’123123’ 字符串拼接 123+123=246 数值加减Char（M）定长Varchar（M）变长 一个字节存储一个汉字Text 文本Enum：枚举Set：组int 整型tinyint 整型（0-256）decimal 浮点型（总位数，小数位数） 例如 decimal(3,1)char(X) 定长字符型 例如 char(10)varchar(X) 可变长度字符型 例如varchar（10）text 大段文本binary 二进制（存储照片等）]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL 数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[写在前面]]></title>
    <url>%2F2019%2F02%2F15%2F%E5%89%8D%E8%A8%80%2F</url>
    <content type="text"><![CDATA[搭了三天的博客终于基本完工了！可能是因为作者我太蠢了，来来回回走一步卡三步的！但这是我人生中第一个正儿八经的博客，还是有（非）点（常）开心的，用人生中第一篇博客文章纪念一下哈哈哈哈哈！我是非计算机相关专业的，以前对程序方面的东西涉猎不多，接触到这个博客完全是受wltongxue的影响，在此特别鸣谢wltongxue对我的爱与鼓励！搭建这样一个空间，只是想对平日里学到的东西做一个记录,毕竟忘的太快了（搭完博客要写的学习笔记已经要忘完了），记在word里又并不想看。可能大多数人用hexo来做很多技术型的分享，但目前我只把她当作一个自己的学习记录空间（应该没有人用这个来记录情感生活）如果有一天xwtongxue的笔记发扬光大了我就来把前面这句话删了！隔行如隔山，只希望能尽量多学多记录一些有用的东西。 我脑海中的画面是，一个漫游者日出时站在无名的路上，太阳升起来了，火车从旁边呼啸而过。这个年轻人的心情是如此自由，他有点饿，也知道得很清楚，自己对前面的道路一无所知。 写不下去了。。收拾收拾睡一会儿，希望开学前能把学的东西更新完。。]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F02%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
